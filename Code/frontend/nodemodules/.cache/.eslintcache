[{"D:\\project\\frontend\\src\\index.js":"1","D:\\project\\frontend\\src\\reportWebVitals.js":"2","D:\\project\\frontend\\src\\App.js":"3","D:\\project\\frontend\\src\\Context\\ChatProvider.js":"4","D:\\project\\frontend\\src\\Pages\\Homepage.js":"5","D:\\project\\frontend\\src\\Pages\\Chatpage.js":"6","D:\\project\\frontend\\src\\components\\Chatbox.js":"7","D:\\project\\frontend\\src\\components\\Authentication\\Login.js":"8","D:\\project\\frontend\\src\\components\\Authentication\\Signup.js":"9","D:\\project\\frontend\\src\\components\\miscellaneous\\SideDrawer.js":"10","D:\\project\\frontend\\src\\components\\MyChats.js":"11","D:\\project\\frontend\\src\\components\\SingleChat.js":"12","D:\\project\\frontend\\src\\components\\ChatLoading.js":"13","D:\\project\\frontend\\src\\components\\miscellaneous\\GroupChatModal.js":"14","D:\\project\\frontend\\src\\config\\ChatLogics.js":"15","D:\\project\\frontend\\src\\components\\miscellaneous\\ProfileModal.js":"16","D:\\project\\frontend\\src\\components\\userAvatar\\UserListItem.js":"17","D:\\project\\frontend\\src\\components\\miscellaneous\\UpdateGroupChatModal.js":"18","D:\\project\\frontend\\src\\components\\userAvatar\\UserBadgeItem.js":"19","D:\\project\\frontend\\src\\components\\ScrollableChat.js":"20"},{"size":760,"mtime":1678004442000,"results":"21","hashOfConfig":"22"},{"size":375,"mtime":1678004442000,"results":"23","hashOfConfig":"22"},{"size":356,"mtime":1678004442000,"results":"24","hashOfConfig":"22"},{"size":1078,"mtime":1678004442000,"results":"25","hashOfConfig":"22"},{"size":1410,"mtime":1683094264882,"results":"26","hashOfConfig":"22"},{"size":910,"mtime":1682979676000,"results":"27","hashOfConfig":"22"},{"size":648,"mtime":1678004442000,"results":"28","hashOfConfig":"22"},{"size":3373,"mtime":1678096772000,"results":"29","hashOfConfig":"22"},{"size":6153,"mtime":1683207965383,"results":"30","hashOfConfig":"22"},{"size":6674,"mtime":1683273414039,"results":"31","hashOfConfig":"22"},{"size":3582,"mtime":1682965102000,"results":"32","hashOfConfig":"22"},{"size":10164,"mtime":1683209021279,"results":"33","hashOfConfig":"22"},{"size":612,"mtime":1678004442000,"results":"34","hashOfConfig":"22"},{"size":5184,"mtime":1678004442000,"results":"35","hashOfConfig":"22"},{"size":1384,"mtime":1678004442000,"results":"36","hashOfConfig":"22"},{"size":1667,"mtime":1678004442000,"results":"37","hashOfConfig":"22"},{"size":1078,"mtime":1683311535008,"results":"38","hashOfConfig":"22"},{"size":7474,"mtime":1683316839062,"results":"39","hashOfConfig":"22"},{"size":655,"mtime":1685983844514,"results":"40","hashOfConfig":"22"},{"size":13581,"mtime":1683025275941,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"14yk38",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":1,"source":"85","usedDeprecatedRules":"44"},"D:\\project\\frontend\\src\\index.js",[],["86","87"],"D:\\project\\frontend\\src\\reportWebVitals.js",[],"D:\\project\\frontend\\src\\App.js",[],"D:\\project\\frontend\\src\\Context\\ChatProvider.js",[],"D:\\project\\frontend\\src\\Pages\\Homepage.js",[],"D:\\project\\frontend\\src\\Pages\\Chatpage.js",[],"D:\\project\\frontend\\src\\components\\Chatbox.js",[],"D:\\project\\frontend\\src\\components\\Authentication\\Login.js",[],"D:\\project\\frontend\\src\\components\\Authentication\\Signup.js",[],"D:\\project\\frontend\\src\\components\\miscellaneous\\SideDrawer.js",[],"D:\\project\\frontend\\src\\components\\MyChats.js",[],"D:\\project\\frontend\\src\\components\\SingleChat.js",["88","89","90","91"],"import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { EmojiEmotions, AttachFile, Mic } from '@mui/icons-material';\r\nimport { styled } from '@mui/material';\r\nimport { GetApp as GetAppIcon } from '@mui/icons-material';\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\r\nvar socket, selectedChatCompare;\r\n\r\nconst Container = styled(Box)`\r\n    height: 55px;\r\n    background: #ededed;\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 0 15px;\r\n    &  > * {\r\n        margin: 5px;\r\n        color: #919191;\r\n    }\r\n`;\r\nconst ClipIcon = styled(AttachFile)`\r\n    transform: 'rotate(40deg)'\r\n`;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  \r\n  const [messages, setMessages] = useState([]);\r\n  const [value, setValue] = useState();\r\n  const [file, setFile] = useState();\r\n  const [image, setImage] = useState();\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      console.log(data)\r\n\r\n      setMessages(data);\r\n      setLoading(false);\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    console.log(event)\r\n    if ((event.key === \"Enter\" || event.type===\"click\") && value) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      console.log(\"yes\")\r\n\r\n      let message = {};\r\n      if (!file) {\r\n          message = {\r\n            content: value,\r\n            chatId: selectedChat,\r\n              type: 'text',\r\n              text: value\r\n          };\r\n      } else {\r\n          message = {\r\n            content: value,\r\n            chatId: selectedChat,\r\n              type: 'file',\r\n              text: image\r\n          };\r\n      }\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        setValue('');\r\n            setFile();\r\n            setImage('');\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          // {\r\n          //   content: newMessage,\r\n          //   chatId: selectedChat,\r\n          // }\r\n          message\r\n          ,\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const uploadFile = async (data) => {\r\n    try {\r\n        return await axios.post(\"/file/upload\", data);\r\n    } catch (error) {\r\n        console.log('Error while calling newConversations API ', error);\r\n    }\r\n}\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getImage = async () => {\r\n        if (file) {\r\n            const data = new FormData();\r\n            data.append(\"name\", file.name);\r\n            data.append(\"file\", file);\r\n\r\n            const response = await uploadFile(data);\r\n            setImage(response.data);\r\n        }\r\n    }\r\n    getImage();\r\n}, [file])\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  const onFileChange = (e) => {\r\n    setValue(e.target.files[0].name);\r\n    setFile(e.target.files[0]);\r\n}\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    // height={50}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Container>\r\n              <EmojiEmotions />\r\n              <label htmlFor=\"fileInput\">\r\n                <ClipIcon />\r\n            </label>\r\n            <input\r\n                type='file'\r\n                id=\"fileInput\"\r\n                style={{ display: 'none' }}\r\n                onChange={(e) => onFileChange(e)}\r\n            />\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                // value={newMessage}\r\n                value={value}\r\n                onChange={(e) => setValue(e.target.value)}\r\n                />\r\n                <button onClick={sendMessage}>send</button>\r\n                </Container>\r\n\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // to get socket.io on same page\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","D:\\project\\frontend\\src\\components\\ChatLoading.js",[],"D:\\project\\frontend\\src\\components\\miscellaneous\\GroupChatModal.js",[],"D:\\project\\frontend\\src\\config\\ChatLogics.js",[],"D:\\project\\frontend\\src\\components\\miscellaneous\\ProfileModal.js",[],"D:\\project\\frontend\\src\\components\\userAvatar\\UserListItem.js",["92"],"import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport {\r\n  Button,}from \"@chakra-ui/react\";\r\n\r\nconst UserListItem = ({ user, handleFunction }) => {\r\n\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n      justifyContent=\"space-between\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n      <Button onClick={handleFunction} colorScheme=\"green\" ml=\"auto\">\r\n        Add\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","D:\\project\\frontend\\src\\components\\miscellaneous\\UpdateGroupChatModal.js",[],"D:\\project\\frontend\\src\\components\\userAvatar\\UserBadgeItem.js",[],"D:\\project\\frontend\\src\\components\\ScrollableChat.js",["93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108"],"import {React, useState} from 'react'\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { Box, styled, Typography } from '@mui/material';\r\nimport { GetApp as GetAppIcon } from '@mui/icons-material';\r\n\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\n\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport { Menu, MenuButton, MenuList, MenuItem, MenuDivider } from \"@chakra-ui/react\";\r\n\r\nimport { Button } from \"@chakra-ui/button\";\r\n\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport \"./styles.css\"\r\nconst Time = styled(Typography)`\r\n    font-size: 10px;\r\n    color: #919191;\r\n    margin-top: 6px;\r\n    word-break: keep-all;\r\n    margin-top: auto;\r\n`;\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const {\r\n    selectedChat,\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const [showPopup, setShowPopup] = useState(false);\r\n  const [newContent, setNewContent] = useState('');\r\n  const [updateMessageContent, setUpdateMessageContent] = useState('');\r\n\r\n  const handleUpdateClick = (m) => {\r\n    setShowPopup(true);\r\n    setUpdateMessageContent(m._id)\r\n  };\r\n\r\n  const handlePopupClose = () => {\r\n    setShowPopup(false);\r\n    setNewContent('');\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    setNewContent(event.target.value);\r\n  };\r\n\r\n  const [selectedMessage, setSelectedMessage] = useState(\"\");\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  // console.log(isLastMessage,\r\n  //   isSameSender,\r\n  //   isSameSenderMargin,\r\n  //   isSameUser,)\r\n\r\n\r\n  // const { user, setSelectedChat, selectedChat, chats } = ChatState();\r\n  // console.log(messages)\r\n  // console.log(notification)\r\n  // console.log(selectedChat)\r\n\r\n  // console.log(user)\r\n  console.log(chats)\r\n\r\n  const handleReplyPricvately = (message) => {\r\n    console.log(message)\r\n  }\r\n  const handleReplyPrivately = (messageId) => {\r\n    // Your logic to handle replying privately to a message goes here\r\n    console.log(`Replying privately to message ${messageId}`);\r\n  };\r\n\r\n  const handleDeleteMessage = async (message) => {\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n\r\n      const { data } = await axios.delete(\r\n        `/api/message/${message._id}`,\r\n        config\r\n      );\r\n      toast({\r\n        title: \"Message Deleted!\",\r\n        description: \"Message was deleted successfully!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      window.location.reload()\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to delete the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  const handleUpdateSubmit = async (message) => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n\r\n      const { data } = await axios.put(\r\n        `/api/message/${message._id}`,\r\n        config,\r\n      );\r\n      // toast({\r\n      //   title: \"Message updated!\",\r\n      //   description: \"Message was updated successfully!\",\r\n      //   status: \"success\",\r\n      //   duration: 5000,\r\n      //   isClosable: true,\r\n      //   position: \"bottom\",\r\n      // });\r\n      // window.location.reload()\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to update the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      // onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n    {/* <ScrollableFeed>\r\n    {messages &&\r\n      messages.map((m, i) => (\r\n        <div style={{ display: \"flex\" }} key={m._id}>\r\n          {(isSameSender(messages, m, i, user._id) ||\r\n            isLastMessage(messages, i, user._id)) && (\r\n            <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n              <Avatar\r\n                mt=\"7px\"\r\n                mr={1}\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={m.sender.name}\r\n                src={m.sender.pic}\r\n              />\r\n            </Tooltip>\r\n          )}\r\n          <span\r\n            style={{\r\n              backgroundColor: `${\r\n                m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n              }`,\r\n              marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n              marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n              borderRadius: \"20px\",\r\n              padding: \"5px 15px\",\r\n              maxWidth: \"75%\",\r\n              position: \"relative\", // To make the dropdown menu position relative to this element\r\n            }}\r\n          >\r\n            {m.content}\r\n            <Menu>\r\n              <MenuButton\r\n                as=\"span\"\r\n                ml={2}\r\n                position=\"absolute\"\r\n                top=\"50%\"\r\n                right={0}\r\n                transform=\"translateY(-50%)\"\r\n              >\r\n                Reply Privately\r\n              </MenuButton>\r\n              <MenuList>\r\n                <MenuItem\r\n                  onClick={() => handleReplyPrivately(m._id)}\r\n                  disabled={selectedMessageId !== \"\" && selectedMessageId !== m._id}\r\n                >\r\n                  {selectedMessageId === m._id ? \"Selected\" : \"Reply privately\"}\r\n                </MenuItem>\r\n              </MenuList>\r\n            </Menu>\r\n          </span>\r\n        </div>\r\n      ))}\r\n  </ScrollableFeed> */}\r\n    <ScrollableFeed>\r\n    {showPopup && (\r\n      \r\n       <div className=\"popup\">\r\n       <input type=\"text\" value={newContent} onChange={handleInputChange} />\r\n       <button className=\"update\" onClick={handleUpdateSubmit(updateMessageContent)}>Update</button>\r\n       <button className=\"cancel\" onClick={handlePopupClose}>Cancel</button>\r\n     </div>\r\n      )}\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {\r\n                  m.type === 'file' ? <ImageMessage message={m} /> : m.content\r\n              }\r\n              {/* {m.content} */}\r\n              {m.chat.isGroupChat === true && isSameSender(messages, m, i, user._id) &&  (\r\n                  <Menu>\r\n                    <MenuButton\r\n                      as={Button}\r\n                      bg=\"none\"\r\n                      rightIcon={<ChevronDownIcon />}\r\n                      size=\"xs\"\r\n                      ml={1}\r\n                    >\r\n                    </MenuButton>\r\n                    <MenuList>\r\n                      <MenuItem\r\n                        fontSize=\"xs\"\r\n                        fontWeight=\"semibold\"\r\n                        color=\"gray.600\"\r\n                        _hover={{ bg: \"gray.100\" }}\r\n                        onClick={() => accessChat(m.sender._id)}\r\n                      >\r\n                        Reply Privately\r\n                      </MenuItem>\r\n                      {/* <MenuItem\r\n                        fontSize=\"xs\"\r\n                        fontWeight=\"semibold\"\r\n                        color=\"gray.600\"\r\n                        _hover={{ bg: \"gray.100\" }}\r\n                        // onClick={() => handleReplyPricvately(m.chat)}\r\n                      >\r\n                        React\r\n                      </MenuItem> */}\r\n                    </MenuList>\r\n                  </Menu>\r\n                )}\r\n                 {isSameUser(messages, m, i, user.    _id) &&\r\n                  (\r\n                  <Menu>\r\n                    <MenuButton\r\n                      as={Button}\r\n                      bg=\"none\"\r\n                      rightIcon={<ChevronDownIcon />}\r\n                      size=\"xs\"\r\n                      ml={1}\r\n                    >\r\n                    </MenuButton>\r\n                    <MenuList>\r\n                      {/* <MenuItem\r\n                        fontSize=\"xs\"\r\n                        fontWeight=\"semibold\"\r\n                        color=\"gray.600\"\r\n                        _hover={{ bg: \"gray.100\" }}\r\n                        // onClick={() => handleReplyPricvately(m.chat)}\r\n                      >\r\n                        React\r\n                      </MenuItem>\r\n                      <MenuItem\r\n                        fontSize=\"xs\"\r\n                        fontWeight=\"semibold\"\r\n                        color=\"gray.600\"\r\n                        _hover={{ bg: \"gray.100\" }}\r\n                        onClick={() => handleUpdateClick(m)}\r\n                      >\r\n                        Update\r\n                      </MenuItem> */}\r\n                      <MenuItem\r\n                        fontSize=\"xs\"\r\n                        fontWeight=\"semibold\"\r\n                        color=\"gray.600\"\r\n                        _hover={{ bg: \"gray.100\" }}\r\n                        onClick={() => handleDeleteMessage(m)}\r\n                      >\r\n                        Delete\r\n                      </MenuItem>\r\n                    </MenuList>\r\n                  </Menu>\r\n                )}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n    </>\r\n  );\r\n};\r\n\r\nconst ImageMessage = ({ message }) => {\r\n  const iconPDF = 'https://cdn4.iconfinder.com/data/icons/logos-and-brands/512/27_Pdf_File_Type_Adobe_logo_logos-512.png';\r\n\r\n  const downloadMedia = async (e, originalImage) => {\r\n    e.preventDefault();\r\n    console.log(originalImage)\r\n    try {\r\n        fetch(originalImage)\r\n        .then(resp => resp.blob())\r\n        .then(blob => {\r\n            const url = window.URL.createObjectURL(blob);\r\n            const a = document.createElement('a');\r\n            a.style.display = 'none';\r\n            a.href = url;\r\n\r\n            const nameSplit = originalImage.split(\"/\");\r\n            const duplicateName = nameSplit.pop();\r\n\r\n            // the filename you want\r\n            a.download = \"\" + duplicateName + \"\";\r\n            document.body.appendChild(a);\r\n            a.click();\r\n            window.URL.revokeObjectURL(url);\r\n        })\r\n        .catch((error) => console.log('Error while downloading the image ', error))\r\n\r\n    } catch (error) {\r\n        console.log('Error while downloading the image ', error);\r\n    }\r\n}\r\n  return (\r\n      <div style={{ position: 'relative' }}>\r\n          {\r\n              message?.text?.includes('.pdf') ?\r\n                  <div style={{ display: 'flex' }}>\r\n                      <img src={iconPDF} alt=\"pdf-icon\" style={{ width: 80 }} />\r\n                      {/* <Typography style={{ fontSize: 14 }} >{message.text.split(\"/\").pop()}</Typography> */}\r\n                  </div>\r\n              : \r\n                  <img style={{ width: 300, height: '100%', objectFit: 'cover' }} src={message.text} alt={message.text} />\r\n          }\r\n           <GetAppIcon \r\n                  onClick={(e) => downloadMedia(e, message.text)} \r\n                  fontSize='small' \r\n                  style={{ marginRight: 10, border: '1px solid grey', borderRadius: '50%' }} \r\n              />\r\n          {/* <Time style={{ position: 'absolute', bottom: 0, right: 0 }}>\r\n              <GetAppIcon \r\n                  onClick={(e) => downloadMedia(e, message.text)} \r\n                  fontSize='small' \r\n                  style={{ marginRight: 10, border: '1px solid grey', borderRadius: '50%' }} \r\n              />\r\n              {formatDate(message.createdAt)}\r\n          </Time> */}\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default ScrollableChat;\r\n",{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":7,"column":37,"nodeType":"115","messageId":"116","endLine":7,"endColumn":40},{"ruleId":"113","severity":1,"message":"117","line":9,"column":20,"nodeType":"115","messageId":"116","endLine":9,"endColumn":30},{"ruleId":"113","severity":1,"message":"118","line":49,"column":10,"nodeType":"115","messageId":"116","endLine":49,"endColumn":20},{"ruleId":"113","severity":1,"message":"119","line":212,"column":9,"nodeType":"115","messageId":"116","endLine":212,"endColumn":22},{"ruleId":"113","severity":1,"message":"120","line":3,"column":10,"nodeType":"115","messageId":"116","endLine":3,"endColumn":19},{"ruleId":"113","severity":1,"message":"121","line":11,"column":10,"nodeType":"115","messageId":"116","endLine":11,"endColumn":13},{"ruleId":"113","severity":1,"message":"122","line":18,"column":48,"nodeType":"115","messageId":"116","endLine":18,"endColumn":59},{"ruleId":"113","severity":1,"message":"123","line":22,"column":10,"nodeType":"115","messageId":"116","endLine":22,"endColumn":18},{"ruleId":"113","severity":1,"message":"124","line":24,"column":7,"nodeType":"115","messageId":"116","endLine":24,"endColumn":11},{"ruleId":"113","severity":1,"message":"125","line":34,"column":5,"nodeType":"115","messageId":"116","endLine":34,"endColumn":17},{"ruleId":"113","severity":1,"message":"126","line":37,"column":5,"nodeType":"115","messageId":"116","endLine":37,"endColumn":17},{"ruleId":"113","severity":1,"message":"127","line":38,"column":5,"nodeType":"115","messageId":"116","endLine":38,"endColumn":20},{"ruleId":"113","severity":1,"message":"128","line":48,"column":9,"nodeType":"115","messageId":"116","endLine":48,"endColumn":26},{"ruleId":"113","severity":1,"message":"129","line":62,"column":10,"nodeType":"115","messageId":"116","endLine":62,"endColumn":25},{"ruleId":"113","severity":1,"message":"130","line":62,"column":27,"nodeType":"115","messageId":"116","endLine":62,"endColumn":45},{"ruleId":"113","severity":1,"message":"131","line":63,"column":10,"nodeType":"115","messageId":"116","endLine":63,"endColumn":21},{"ruleId":"113","severity":1,"message":"132","line":79,"column":9,"nodeType":"115","messageId":"116","endLine":79,"endColumn":30},{"ruleId":"113","severity":1,"message":"133","line":82,"column":9,"nodeType":"115","messageId":"116","endLine":82,"endColumn":29},{"ruleId":"113","severity":1,"message":"134","line":97,"column":15,"nodeType":"115","messageId":"116","endLine":97,"endColumn":19},{"ruleId":"113","severity":1,"message":"134","line":132,"column":15,"nodeType":"115","messageId":"116","endLine":132,"endColumn":19},{"ruleId":"135","severity":1,"message":"136","line":316,"column":46,"nodeType":"137","messageId":"138","endLine":316,"endColumn":58,"fix":"139"},"no-native-reassign",["140"],"no-negated-in-lhs",["141"],"no-unused-vars","'Mic' is defined but never used.","Identifier","unusedVar","'GetAppIcon' is defined but never used.","'newMessage' is assigned a value but never used.","'typingHandler' is assigned a value but never used.","'ChatState' is defined but never used.","'Box' is defined but never used.","'MenuDivider' is defined but never used.","'BellIcon' is defined but never used.","'Time' is assigned a value but never used.","'selectedChat' is assigned a value but never used.","'notification' is assigned a value but never used.","'setNotification' is assigned a value but never used.","'handleUpdateClick' is assigned a value but never used.","'selectedMessage' is assigned a value but never used.","'setSelectedMessage' is assigned a value but never used.","'loadingChat' is assigned a value but never used.","'handleReplyPricvately' is assigned a value but never used.","'handleReplyPrivately' is assigned a value but never used.","'data' is assigned a value but never used.","no-whitespace-before-property","Unexpected whitespace before property _id.","MemberExpression","unexpectedWhitespace",{"range":"142","text":"143"},"no-global-assign","no-unsafe-negation",[9597,9602],"."]